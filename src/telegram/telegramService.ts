import * as message from 'src/message/message';
import { CronJob } from 'cron';
import { DevList, InfList } from 'src/db/dbImitation'
import Telegraf from 'telegraf';
import { TrelloService, TRELLO_API_KEY, TRELLO_OAUTH_TOKEN } from 'src/trello/trelloService';
import { User } from 'src/dto/user.dto';
import { UserRole } from 'src/dto/user_role.dto';
import { DataBaseService } from 'src/db/dataBaseService';
import { isNull } from 'util';
import { Task } from 'src/dto/task.dto';
import { InlineKeyboardMarkup, InlineKeyboardButton } from 'telegraf/typings/telegram-types';
import { NeuralNetwortService } from 'src/neural_network/NeuralNetworkService';
import { Injectable } from '@nestjs/common';
const axios = require('axios').default;
const SocksAgent = require('socks5-https-client/lib/Agent');
const BOT_TOKEN = '1101937644:AAGpcksRnpcVthFgFTP4Rz5FJ1_H8IjVFi8';
/////////////////////////////////////////////////////////////// –ù–ï –ó–ê–ë–´–¢–¨ –°–ö–†–´–¢–¨ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ü–†–û–ö–°–ò
type Status = 'none' | 'test' | 'registration' | 'verification' | 'newcard' | 'newcarddesc' | 'newcardAccept';
enum keyBoards {
    registration,
    neuralNetworkTest,
    exit,
    labelAccept,
    acceptNewCard,
    nonDescription
};

@Injectable()
export class TelegramService {
    state: { [id: string]: Status; } = {};
    keyAccess = 'klqOMgfM8x'
    bot: Telegraf<any>;
    wasConnection = false;
    itWas = false;
    tmpTask = new Task();
    roles = { "roles": [] };
    cardName = ''
    cardDesc = ''
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param type —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    getKeyboard(type: keyBoards) {

        switch (type) {
            case keyBoards.neuralNetworkTest:
                return {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –î–∞', callback_data: `nnCorrect` },
                            { text: '‚ùå –ù–µ—Ç', callback_data: `nnNotCorrect` }]
                        ]
                    }
                };
            case keyBoards.labelAccept:
                return {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –î–∞', callback_data: `labelAccept` },
                            { text: '‚ùå –ù–µ—Ç', callback_data: `labelNotAccept` }],
                            [{ text: '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', callback_data: `moreInf` }]
                        ]
                    },
                };
            case keyBoards.registration:
                return {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: `backend${this.roles.roles.some(o => o == 'backDeveloper') ? '‚úÖ' : '‚ùå'}`, callback_data: 'backend' },
                            { text: `frontend${this.roles.roles.some(o => o == 'frontDeveloper') ? '‚úÖ' : '‚ùå'}`, callback_data: 'frontend' }],
                            [{ text: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞${this.roles.roles.some(o => o == 'supporter') ? '‚úÖ' : '‚ùå'}`, callback_data: 'supporter' }],
                            [{ text: `${this.roles.roles.length > 0 ? '‚úÖ' : '‚ùå'}`, callback_data: `ExitRegistration` }]
                        ]
                    }
                }
            case keyBoards.exit:
                return {
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '‚ùå', callback_data: `ExitRegistration` }]
                        ]
                    }
                }
            case keyBoards.acceptNewCard:
                return {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –î–∞', callback_data: `cardCreate` },
                            { text: '‚ùå –ù–µ—Ç', callback_data: `cardNotCreate` }]
                        ]
                    }
                }
            case keyBoards.nonDescription:
                return {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è', callback_data: `nonDescrition` }]
                        ]
                    }
                }
            default:
                break;
        }
    }

    public constructor(
        private tService: TrelloService,
        private dataBaseService: DataBaseService,
        private nnService: NeuralNetwortService,
    ) {
        /**
        * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–æ—Ç—É
        */
        this.bot = new Telegraf(BOT_TOKEN, {

        });
        /**
         * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
         */
        this.bot.on('photo', async (ctx) => {
            const chatId = ctx.chat.id;
            this.bot.telegram.sendMessage(chatId, '–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ —Ñ–æ—Ç–æ —è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é')
        });
        /**
        * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∏–∫—Ä–æ–≤
        */
        this.bot.on('sticker', async (ctx) => {
            const chatId = ctx.chat.id;
            this.bot.telegram.sendMessage(chatId, '–°—Ç–∏–∫–µ—Ä—ã —ç—Ç–æ –∫–æ–Ω–µ—á–Ω–æ –∑–¥–æ—Ä–æ–≤–æ, –Ω–æ –∏—Ö —è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é')
        });
        /**
        * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É
        */
        this.bot.on('callback_query', async (ctx) => {
            console.log('From: ' + ctx.update.callback_query.from.first_name, ctx.update.callback_query.from.last_name, '\nCallback_query: ' + ctx.update.callback_query.data, '\nTime: ' + new Date().getHours() + ':' + new Date().getMinutes() + '\n')
            switch (ctx.update.callback_query.data) {
                case 'labelAccept': {
                    this.bot.telegram.editMessageReplyMarkup(ctx.update.callback_query.from.id, ctx.update.callback_query.message.message_id);
                    let newTasks = await (await this.dataBaseService.getAllTaskes()).find(o => isNull(o.trueLabel))
                    if (newTasks) {
                        nnService.addNewRaw(newTasks.name + ' ' + newTasks.description, newTasks.neuralLabel);
                        newTasks.trueLabel = newTasks.neuralLabel
                        await dataBaseService.addTask(newTasks)
                        this.sendNewCardMessage()
                    } else {
                        this.bot.telegram.sendMessage(ctx.update.callback_query.from.id, '–ù–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç')
                    }

                    break;
                }
                case 'labelNotAccept': {
                    this.bot.telegram.editMessageReplyMarkup(ctx.update.callback_query.from.id, ctx.update.callback_query.message.message_id);
                    let newTasks = await (await this.dataBaseService.getAllTaskes()).find(o => isNull(o.trueLabel))
                    if (newTasks) {
                        newTasks.trueLabel = newTasks.neuralLabel == 'front' ? 'back' : 'front'
                        nnService.addNewRaw(newTasks.name + ' ' + newTasks.description, newTasks.trueLabel);
                        await dataBaseService.addTask(newTasks)
                        this.sendNewCardMessage()
                    } else {
                        this.bot.telegram.sendMessage(ctx.update.callback_query.from.id, '–ù–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç')
                    }
                    break;
                }
                case 'moreInf': {
                    this.bot.telegram.editMessageReplyMarkup(ctx.update.callback_query.from.id, ctx.update.callback_query.message.message_id);
                    let newTasks = await (await this.dataBaseService.getAllTaskes()).find(o => isNull(o.trueLabel))
                    if (newTasks) {
                        newTasks.trueLabel = 'moreInf'
                        await dataBaseService.addTask(newTasks)
                        // await tService.moveTask(newTasks)
                        this.sendNewCardMessage()
                    } else {
                        this.bot.telegram.sendMessage(ctx.update.callback_query.from.id, '–ù–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç')
                    }
                    break;
                }
                case 'nnCorrect': {
                    this.bot.telegram.sendMessage(ctx.update.callback_query.from.id, 'üòÑ –Ø –º–æ–ª–æ–¥–µ—Ü!')
                    this.bot.telegram.editMessageReplyMarkup(ctx.update.callback_query.from.id, ctx.update.callback_query.message.message_id)
                    break;
                }
                case 'nnNotCorrect': {
                    this.bot.telegram.sendMessage(ctx.update.callback_query.from.id, 'üòî –ß—Ç–æ –∂, –±—É–¥—É –∑–Ω–∞—Ç—å...')
                    this.bot.telegram.editMessageReplyMarkup(ctx.update.callback_query.from.id, ctx.update.callback_query.message.message_id)
                    break;
                }
                case 'backend': {

                    if (this.roles.roles.some(o => o == 'backDeveloper')) {
                        let index = this.roles.roles.indexOf('backDeveloper', 0)
                        if (index >= 0) {
                            this.roles.roles.splice(index, 1);
                        }
                    } else {
                        this.roles.roles.push('backDeveloper');
                    }
                    const oneButtonOptions = {
                        inline_keyboard: [
                            [{ text: `backend${this.roles.roles.some(o => o == 'backDeveloper') ? '‚úÖ' : '‚ùå'}`, callback_data: 'backend' },
                            { text: `frontend${this.roles.roles.some(o => o == 'frontDeveloper') ? '‚úÖ' : '‚ùå'}`, callback_data: 'frontend' }],
                            [{ text: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞${this.roles.roles.some(o => o == 'supporter') ? '‚úÖ' : '‚ùå'}`, callback_data: 'supporter' }],
                            [{ text: `${this.roles.roles.length > 0 ? '‚úÖ' : '‚ùå'}`, callback_data: `ExitRegistration` }]
                        ]
                    };
                    await this.bot.telegram.editMessageReplyMarkup(ctx.update.callback_query.from.id, ctx.update.callback_query.message.message_id, undefined, JSON.stringify(oneButtonOptions));

                    console.log(this.roles.roles)
                    break;
                }
                case 'frontend': {
                    if (this.roles.roles.some(o => o == 'frontDeveloper')) {
                        let index = this.roles.roles.indexOf('frontDeveloper', 0)
                        if (index >= 0) {
                            this.roles.roles.splice(index, 1);
                        }
                    } else {
                        this.roles.roles.push('frontDeveloper');
                    }
                    const oneButtonOptions = {
                        inline_keyboard: [
                            [{ text: `backend${this.roles.roles.some(o => o == 'backDeveloper') ? '‚úÖ' : '‚ùå'}`, callback_data: 'backend' },
                            { text: `frontend${this.roles.roles.some(o => o == 'frontDeveloper') ? '‚úÖ' : '‚ùå'}`, callback_data: 'frontend' }],
                            [{ text: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞${this.roles.roles.some(o => o == 'supporter') ? '‚úÖ' : '‚ùå'}`, callback_data: 'supporter' }],
                            [{ text: `${this.roles.roles.length > 0 ? '‚úÖ' : '‚ùå'}`, callback_data: `ExitRegistration` }]
                        ]
                    };
                    await this.bot.telegram.editMessageReplyMarkup(ctx.update.callback_query.from.id, ctx.update.callback_query.message.message_id, undefined, JSON.stringify(oneButtonOptions));

                    console.log(this.roles.roles)
                    break;
                }
                case 'supporter': {
                    if (this.roles.roles.some(o => o == 'supporter')) {
                        let index = this.roles.roles.indexOf('supporter', 0)
                        if (index >= 0) {
                            this.roles.roles.splice(index, 1);
                        }
                    } else {
                        this.roles.roles.push('supporter');
                    }
                    const oneButtonOptions = {
                        inline_keyboard: [
                            [{ text: `backend${this.roles.roles.some(o => o == 'backDeveloper') ? '‚úÖ' : '‚ùå'}`, callback_data: 'backend' },
                            { text: `frontend${this.roles.roles.some(o => o == 'frontDeveloper') ? '‚úÖ' : '‚ùå'}`, callback_data: 'frontend' }],
                            [{ text: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞${this.roles.roles.some(o => o == 'supporter') ? '‚úÖ' : '‚ùå'}`, callback_data: 'supporter' }],
                            [{ text: `${this.roles.roles.length > 0 ? '‚úÖ' : '‚ùå'}`, callback_data: `ExitRegistration` }]
                        ]
                    };
                    await this.bot.telegram.editMessageReplyMarkup(ctx.update.callback_query.from.id, ctx.update.callback_query.message.message_id, undefined, JSON.stringify(oneButtonOptions));

                    console.log(this.roles.roles)
                    break;
                }
                case 'nonDescrition': {
                    this.tmpTask.description = "";
                    this.bot.telegram.editMessageReplyMarkup(ctx.update.callback_query.from.id, ctx.update.callback_query.message.message_id);
                    this.bot.telegram.sendMessage(ctx.update.callback_query.from.id, `–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É?\n<b>${this.cardName}</b>\n${this.cardDesc}`, {
                        parse_mode: 'HTML',
                        ...this.getKeyboard(keyBoards.acceptNewCard)
                    })
                    this.state[ctx.update.callback_query.from.id] = 'none';
                    break;
                }
                case 'cardCreate': {
                    let msg = await tService.createCard(this.cardName, this.cardDesc);
                    this.bot.telegram.sendMessage(ctx.update.callback_query.from.id, msg, { parse_mode: 'HTML' });
                    this.cardName = '';
                    this.cardDesc = '';
                    this.bot.telegram.editMessageReplyMarkup(ctx.update.callback_query.from.id, ctx.update.callback_query.message.message_id);
                    break;
                }
                case 'cardNotCreate': {
                    this.cardName = '';
                    this.cardDesc = '';
                    this.bot.telegram.sendMessage(ctx.update.callback_query.from.id, '–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ');
                    this.bot.telegram.editMessageReplyMarkup(ctx.update.callback_query.from.id, ctx.update.callback_query.message.message_id);
                    break;
                }
                case 'ExitRegistration': {
                    if (this.roles.roles.length == 0) {

                        this.state[ctx.update.callback_query.from.id] = 'none';
                        this.bot.telegram.editMessageReplyMarkup(ctx.update.callback_query.from.id, ctx.update.callback_query.message.message_id);
                        this.bot.telegram.sendMessage(ctx.update.callback_query.from.id, '–†–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
                    } else {
                        let user = new User()
                        user.name = ctx.update.callback_query.from.first_name
                        user.surname = ctx.update.callback_query.from.last_name
                        user.telegramId = ctx.update.callback_query.from.id
                        user.dutyDay = 0
                        user = await dataBaseService.addUser(user);

                        this.roles.roles.forEach(async el => {
                            let userRole = new UserRole
                            userRole.idUser = user.id
                            userRole.idRole = await dataBaseService.getRoleId(el)
                            dataBaseService.addUserRole(userRole)
                        });
                        this.roles = { "roles": [] };
                        this.bot.telegram.editMessageReplyMarkup(ctx.update.callback_query.from.id, ctx.update.callback_query.message.message_id);
                        this.bot.telegram.sendMessage(ctx.update.callback_query.from.id, '–†–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                        this.state[ctx.update.callback_query.from.id] = 'none';
                    }
                    break
                }
            }
        });
        /**
         * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
         */
        this.bot.on('message', async (ctx) => {
            nnService.getFileData();
            const chatId = ctx.chat.id;
            if (!(await dataBaseService.getAllUsers()).some(o => o.telegramId == chatId)
                && ctx.update.message.text != '/neural'
                && this.state[chatId] != 'test') {
                this.bot.telegram.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∞ /neural');
                return;
            }
            console.log('From: ' + ctx.update.message.from.first_name, ctx.update.message.from.last_name, '\nMessage: ' + ctx.message.text, '\nTime: ' + new Date().getHours() + ':' + new Date().getMinutes() + '\n')

            if (ctx.update.message.text === '/stopall') {
                this.state[chatId] = 'none';
                this.bot.telegram.sendMessage(chatId, '–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–∫—Ä–∞—â–µ–Ω—ã.\n–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...')
                return;
            }
            if (this.state[chatId] === 'test' && ctx.update.message.text !== '/neural') {
                let label = await this.tService.getNeuralLabel(ctx.message.text)
                this.bot.telegram.sendMessage(chatId, '–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª, —á—Ç–æ —ç—Ç–æ:\n' + (label == 'front' ? 'Front-end –∑–∞–¥–∞—á–∞' : 'Back-end –∑–∞–¥–∞—á–∞'), this.getKeyboard(keyBoards.neuralNetworkTest));
                this.state[ctx.update.message.from.id] = 'none';
                return;
            }
            if (this.state[chatId] === 'registration' && ctx.update.message.text != '') {
                this.bot.telegram.sendMessage(chatId, '–ü—Ä–æ—à—É, —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–µ–π')
            }
            if (this.state[chatId] === 'verification' && ctx.update.message.text !== '/registration') {

                if (ctx.update.message.text === this.keyAccess) {
                    this.state[chatId] = 'registration';
                    this.roles = { "roles": [] };
                    this.bot.telegram.sendMessage(chatId,
                        '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å (–∏–ª–∏ —Ä–æ–ª–∏)\n–ö–∞–∫ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω—É–∂–Ω—ã–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–∞–ª–æ—á–∫—É –∏–ª–∏ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫ —á—Ç–æ –±—ã –≤—ã–π—Ç–∏', this.getKeyboard(keyBoards.registration))
                } else {
                    this.bot.telegram.sendMessage(chatId,
                        '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏', this.getKeyboard(keyBoards.exit))
                }
            }
            if (this.state[chatId] === 'newcarddesc') {
                this.cardDesc = ctx.update.message.text;
                this.bot.telegram.sendMessage(chatId, `–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É?\n<b>${this.cardName}</b>\n${this.cardDesc}`, {
                    parse_mode: 'HTML',
                    ...this.getKeyboard(keyBoards.acceptNewCard)
                })
                this.state[chatId] = 'none';
            }
            if (this.state[chatId] === 'newcard') {
                this.cardName = ctx.update.message.text;
                this.bot.telegram.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:', this.getKeyboard(keyBoards.nonDescription))
                this.state[chatId] = 'newcarddesc';
            }
            switch (ctx.message.text) {
                case '/neural': {
                    this.state[chatId] = 'test';
                    this.bot.telegram.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:')
                    break;
                }
                case '/accuracy': {
                    let acc = await nnService.getNeuralNetAccuracy()
                    this.bot.telegram.sendMessage(chatId, acc.toString())
                    break;
                }
                case '/start': {
                    this.state[chatId] = 'none';
                    this.bot.telegram.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç, ' + ctx.update.message.from.first_name + message.greetings)
                    break;
                }
                case '/help': {
                    this.bot.telegram.sendMessage(chatId, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:' + message.commands)
                    break;
                }
                case '/frontend': {
                    if ((await dataBaseService.getAllUsers()).some(e => e.telegramId == chatId)) {
                        this.bot.telegram.sendMessage(chatId, await this.getDevMessage(true), { parse_mode: 'HTML' })
                    }
                    break;
                }
                case '/backend': {
                    if ((await dataBaseService.getAllUsers()).some(e => e.telegramId == chatId)) {
                        this.bot.telegram.sendMessage(chatId, await this.getDevMessage(false), { parse_mode: 'HTML' })
                    }
                    break;
                }
                case '/support': {
                    if ((await dataBaseService.getAllUsers()).some(e => e.telegramId == chatId)) {
                        this.bot.telegram.sendMessage(chatId, await this.getSupportMsg(), { parse_mode: 'HTML' })
                    }
                    break;
                }
                case '/registration': {
                    // if ((await dataBaseService.getAllUsers()).filter(o => o.telegramId == chatId).length > 0) {
                    //     this.bot.telegram.sendMessage(chatId, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
                    //     break;
                    // }
                    this.state[chatId] = 'verification';
                    this.bot.telegram.sendMessage(chatId,
                        '–û—Ç–ª–∏—á–Ω–æ!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞</b>:', { parse_mode: 'HTML' })
                    break;
                }
                case '/splitnow': {
                    if ((await dataBaseService.getAllUsersByRole('spliter')).filter(o => o.telegramId == chatId).length > 0) {
                        await this.sendNewCardMessage();
                    } else {
                        this.bot.telegram.sendMessage(chatId, '–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –í—ã –Ω–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å.')
                    }
                    break;
                }
                case '/newcard': {
                    this.state[chatId] = 'newcard';
                    this.bot.telegram.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:', { parse_mode: 'HTML' })
                    break;
                }
                default: {
                    break;
                }
            }
        });

        this.bot.launch();
        this.wasConnection = true;

        this.developDailySending.start();
        this.suppotDailySendingAt10.start();
        this.suppotDailySendingAt14.start();
        this.suppotDailySendingAt16.start();
    }

    /**
     * –í–∑—è—Ç–∏–µ –Ω–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async sendNewCardMessage() {
        let newTasks = await (await this.dataBaseService.getAllTaskes()).find(o => isNull(o.trueLabel));
        let allSpliters = await this.dataBaseService.getAllUsersByRole('spliter');
        if (!newTasks) {
            if (this.itWas) {
                allSpliters.forEach(user => {
                    this.bot.telegram.sendMessage(user.telegramId, '–ó–∞–¥–∞—á –±–æ–ª—å—à–µ –Ω–µ—Ç', { parse_mode: 'HTML' });
                });
                this.itWas = false;
            }
            return;
        }
        this.itWas = true;
        allSpliters.forEach(async user => {
            await this.bot.telegram.sendMessage(user.telegramId,
                '<b>-' + newTasks.name + '-</b>\n'
                + newTasks.description
                + '\n\n–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ, —á—Ç–æ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è <b>'
                + ((newTasks.neuralLabel == 'front') ? 'Front-end' : 'Back-end')
                + '</b>',
                {
                    parse_mode: 'HTML',
                    ...this.getKeyboard(keyBoards.labelAccept)
                });
        });
    }
    //#region –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ
    // –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –ü–ù –¥–æ –ü–¢ –≤ 10:`10
    developDailySending = new CronJob('00 10 10 * * 1-5', function () {
        this.frontMailing()
        this.backMailing()
    });

    // –†–∞—Å—Å—ã–ª–∫–∞ —Å—É–ø–ø–æ—Ä—Ç–µ—Ä–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –ü–ù –¥–æ –ü–¢ –≤ 10 —á–∞—Å–æ–≤
    suppotDailySendingAt10 = new CronJob('0 0 10 * * 1-5', function () {
        this.supportMailing()
        this.sendNewCardMessage();
    });

    // –†–∞—Å—Å—ã–ª–∫–∞ —Å—É–ø–ø–æ—Ä—Ç–µ—Ä–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –ü–ù –¥–æ –ü–¢ –≤ 14 —á–∞—Å–æ–≤
    suppotDailySendingAt14 = new CronJob('0 0 14 * * 1-5', function () {
        this.supportMailing()
        this.sendNewCardMessage();
    });

    // –†–∞—Å—Å—ã–ª–∫–∞ —Å—É–ø–ø–æ—Ä—Ç–µ—Ä–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –ü–ù –¥–æ –ü–¢ –≤ 16 —á–∞—Å–æ–≤
    suppotDailySendingAt16 = new CronJob('0 0 16 * * 1-5', function () {
        this.supportMailing()
        this.sendNewCardMessage();
    });
    //#endregion

    //#region –§–∏–ª—å—Ç—Ä—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–∫
    //–§–∏–ª—å—Ç—Ä –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–∫–∏ 'front-end'
    isFrontLabel = (element) => {
        return (element.labels.some(e => e.name === 'front-end'));
    };
    //–§–∏–ª—å—Ç—Ä –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–∫–∏ 'back-end'
    isBackLabel = (element) => {
        return (element.labels.some(e => e.name === 'back-end'));
    };
    //–§–∏–ª—å—Ç—Ä –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–µ—Ç–∫–∏ '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
    isNotConsulLabel = (element) => {
        return !(element.labels.some(e => e.name === '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'));
    };
    //–§–∏–ª—å—Ç—Ä –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–∫–∏ '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
    isConsulLabel = (element) => {
        return (element.labels.some(e => e.name === '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'));
    };
    //#endregion

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ —Ç–∞—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–ª—è "–ü–æ–¥–¥–µ—Ä–∂–∫–∏"
     */
    async getSupportCards() {
        try {
            return (await axios.get('https://api.trello.com/1/lists/' + InfList.trelloId + '/cards?key=' + TRELLO_API_KEY + '&token=' + TRELLO_OAUTH_TOKEN)).data
        } catch{
            console.log('Exeption on GET req to Trello to get cards')
            return null;
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è "–ü–æ–¥–¥–µ—Ä–∂–∫–∏"
     */
    async getSupportMsg(): Promise<string> {
        let taskes = await this.getSupportCards();
        let msg = '–ó–∞–¥–∞—á–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n'
        console.log(taskes)
        if (!taskes) {
            return '–ó–∞–¥–∞—á –Ω–µ—Ç';
        }
        let num = 1
        taskes.forEach(element => {
            msg += (num + '. <a href="' + element.url + '"><b>' + element.name + '</b></a>\n' + element.desc + '\n')
            num++;
        });
        return msg;
    }
    /**
     * –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
     */
    async supportMailing() {
        let allSupporters = await (await this.dataBaseService.getAllUsersByRole('supporter'));
        let msg = await this.getSupportMsg();
        if (!isNull(msg)) {
            allSupporters.forEach(async supporter => {
                await this.bot.telegram.sendMessage(supporter.telegramId, msg, { parse_mode: 'HTML' })
            });
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ —Ç–∞—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–ª—è "Front-end"
     */
    async getFrontCards() {
        try {
            let taskes = (await axios.get('https://api.trello.com/1/lists/' + DevList.trelloId + '/cards?key=' + TRELLO_API_KEY + '&token=' + TRELLO_OAUTH_TOKEN)).data.filter(o => o.labels.some(e => e.name == 'front-end'))
            if (!taskes) {
                return '–ó–∞–¥–∞—á –Ω–µ—Ç';
            } else {
                return taskes;
            }
        } catch{
            console.log('Exeption on GET req to Trello to get cards')
            return null;
        }
    }
    /**
    * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ —Ç–∞—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–ª—è "Back-end"
    */
    async getBackCards() {
        try {
            let taskes = (await axios.get('https://api.trello.com/1/lists/' + DevList.trelloId + '/cards?key=' + TRELLO_API_KEY + '&token=' + TRELLO_OAUTH_TOKEN)).data.filter(o => o.labels.some(e => e.name == 'back-end'))
            if (!taskes) {
                return '–ó–∞–¥–∞—á –Ω–µ—Ç';
            } else {
                return taskes;
            }
        } catch{
            console.log('Exeption on GET req to Trello to get cards')
            return null;
        }
    }
    /**
     * –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º Front-end —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
     */
    async frontMailing() {
        let allFront = await this.dataBaseService.getAllUsersByRole('frontDeveloper');
        let message = await this.getDevMessage(true)
        console.log(message)
        allFront.forEach(async fronter => {
            await this.bot.telegram.sendMessage(fronter.telegramId, (message != null ? message : '–°–µ–π—á–∞—Å –∑–∞–¥–∞—á –Ω–µ—Ç'), { parse_mode: 'HTML' })
        });
    }
    /**
     * –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º Back-end —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
     */
    async backMailing() {
        let allBack = await this.dataBaseService.getAllUsersByRole('backDeveloper');
        let message = await this.getDevMessage(false)
        allBack.forEach(async backer => {
            await this.bot.telegram.sendMessage(backer.telegramId, (message != null ? message : '–°–µ–π—á–∞—Å –∑–∞–¥–∞—á –Ω–µ—Ç'), { parse_mode: 'HTML' })
        });
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
     * @param isFront —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç?
     */
    async getDevMessage(isFront: boolean): Promise<string> {
        let msg = '–ó–∞–¥–∞—á–∏:\n\n'
        let taskes = isFront ? await this.getFrontCards() : await this.getBackCards();
        console.log(taskes)
        if (!taskes) {
            return '–ó–∞–¥–∞—á –Ω–µ—Ç';
        }
        let num = 1
        taskes.forEach(element => {
            msg += (num + '. <a href="' + element.url + '"><b>' + element.name + '</b></a>\n' + element.desc + '\n')
            num++
        });
        return msg;
    }
}
